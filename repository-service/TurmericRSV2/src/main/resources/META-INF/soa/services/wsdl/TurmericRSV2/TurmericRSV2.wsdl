<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================================================== -->
<!-- Copyright (c) 2006-2010 eBay Inc. All Rights Reserved. -->
<!-- Licensed under the Apache License, Version 2.0 (the "License"); -->
<!-- you may not use this file except in compliance with the License. -->
<!-- You may obtain a copy of the License at -->
<!-- -->
<!-- http://www.apache.org/licenses/LICENSE-2.0 -->
<!-- ================================================================== -->
<definitions name="RepositoryService"
targetNamespace="http://www.ebayopensource.org/turmeric/repository/v2/services"
xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
xmlns:tns="http://www.ebayopensource.org/turmeric/repository/v2/services"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
xmlns:xmime="http://www.w3.org/2005/05/xmlmime"
xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/">
   <types>
      <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
      targetNamespace="http://www.ebayopensource.org/turmeric/repository/v2/services"
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

         <xs:element name="createCompleteAssetRequest" nillable="true"
         type="tns:CreateCompleteAssetRequest" />

         <xs:element name="createCompleteAssetResponse" nillable="true"
         type="tns:CreateCompleteAssetResponse" />

         <xs:element name="createAndSubmitAssetRequest" nillable="true"
         type="tns:CreateAndSubmitAssetRequest" />

         <xs:element name="createAndSubmitAssetResponse" nillable="true"
         type="tns:CreateAndSubmitAssetResponse" />

         <xs:element name="updateCompleteAssetRequest" nillable="true"
         type="tns:UpdateCompleteAssetRequest" />

         <xs:element name="updateCompleteAssetResponse" nillable="true"
         type="tns:UpdateCompleteAssetResponse" />

         <xs:element name="createAssetRequest" nillable="true"
         type="tns:CreateAssetRequest" />

         <xs:element name="createAssetResponse" nillable="true"
         type="tns:CreateAssetResponse" />

         <xs:element name="updateAssetRequest" nillable="true"
         type="tns:UpdateAssetRequest" />

         <xs:element name="updateAssetResponse" nillable="true"
         type="tns:UpdateAssetResponse" />

         <xs:element name="getAssetStatusRequest" nillable="true"
         type="tns:GetAssetStatusRequest" />

         <xs:element name="getAssetStatusResponse" nillable="true"
         type="tns:GetAssetStatusResponse" />

         <xs:element name="updateAssetArtifactsRequest" nillable="true"
         type="tns:UpdateAssetArtifactsRequest" />

         <xs:element name="updateAssetArtifactsResponse" nillable="true"
         type="tns:UpdateAssetArtifactsResponse" />

         <xs:element name="updateAssetAttributesRequest" nillable="true"
         type="tns:UpdateAssetAttributesRequest" />

         <xs:element name="updateAssetAttributesResponse" nillable="true"
         type="tns:UpdateAssetAttributesResponse" />

         <xs:element name="updateAssetDependenciesRequest" nillable="true"
         type="tns:UpdateAssetDependenciesRequest" />

         <xs:element name="updateAssetDependenciesResponse" nillable="true"
         type="tns:UpdateAssetDependenciesResponse" />

         <xs:element name="lockAssetRequest" nillable="true"
         type="tns:LockAssetRequest" />

         <xs:element name="lockAssetResponse" nillable="true"
         type="tns:LockAssetResponse" />

         <xs:element name="unlockAssetRequest" nillable="true"
         type="tns:UnlockAssetRequest" />

         <xs:element name="unlockAssetResponse" nillable="true"
         type="tns:UnlockAssetResponse" />

         <xs:element name="subscribeRequest" nillable="true"
         type="tns:SubscribeRequest" />

         <xs:element name="subscribeResponse" nillable="true"
         type="tns:SubscribeResponse" />

         <xs:element name="unsubscribeRequest" nillable="true"
         type="tns:UnsubscribeRequest" />

         <xs:element name="unsubscribeResponse" nillable="true"
         type="tns:UnsubscribeResponse" />

         <xs:element name="updateSubscriptionRequest" nillable="true"
         type="tns:UpdateSubscriptionRequest" />

         <xs:element name="updateSubscriptionResponse" nillable="true"
         type="tns:UpdateSubscriptionResponse" />

         <xs:element name="getAssetInfoRequest" nillable="true"
         type="tns:GetAssetInfoRequest" />

         <xs:element name="getAssetInfoResponse" nillable="true"
         type="tns:GetAssetInfoResponse" />

         <xs:element name="getBasicAssetInfoRequest" nillable="true"
         type="tns:GetBasicAssetInfoRequest" />

         <xs:element name="getBasicAssetInfoResponse" nillable="true"
         type="tns:GetBasicAssetInfoResponse" />

         <xs:element name="getAllAssetsGroupedByCategoryRequest" nillable="true"
         type="tns:GetAllAssetsGroupedByCategoryRequest" />

         <xs:element name="getAllAssetsGroupedByCategoryResponse" nillable="true"
         type="tns:GetAllAssetsGroupedByCategoryResponse" />

         <xs:element name="searchAssetsDetailedRequest" nillable="true"
         type="tns:SearchAssetsDetailedRequest" />

         <xs:element name="searchAssetsDetailedResponse" nillable="true"
         type="tns:SearchAssetsDetailedResponse" />

         <xs:element name="searchAssetsRequest" nillable="true"
         type="tns:SearchAssetsRequest" />

         <xs:element name="searchAssetsResponse" nillable="true"
         type="tns:SearchAssetsResponse" />

         <xs:element name="getSubscriptionRequest" nillable="true"
         type="tns:GetSubscriptionRequest" />

         <xs:element name="getSubscriptionResponse" nillable="true"
         type="tns:GetSubscriptionResponse" />

         <xs:element name="getAssetDependenciesRequest" nillable="true"
         type="tns:GetAssetDependenciesRequest" />

         <xs:element name="getAssetDependenciesResponse" nillable="true"
         type="tns:GetAssetDependenciesResponse" />

         <xs:element name="getAssetDependenciesByGraphRequest" nillable="true"
         type="tns:GetAssetDependenciesByGraphRequest" >
         	<xs:annotation>
         		<xs:documentation>Needs documentation</xs:documentation>
         	</xs:annotation></xs:element>

         <xs:element name="getAssetDependenciesByGraphResponse" nillable="true"
         type="tns:GetAssetDependenciesByGraphResponse" >
         	<xs:annotation>
         		<xs:documentation></xs:documentation>
         	</xs:annotation></xs:element>

         <xs:element name="getAssetTypesRequest" nillable="true"
         type="tns:GetAssetTypesRequest" />

         <xs:element name="getAssetTypesResponse" nillable="true"
         type="tns:GetAssetTypesResponse" >
         	<xs:annotation>
         		<xs:documentation></xs:documentation>
         	</xs:annotation></xs:element>

         <xs:element name="getAssetLifeCycleStatesRequest" nillable="true"
         type="tns:GetAssetLifeCycleStatesRequest" />

         <xs:element name="getAssetLifeCycleStatesResponse" nillable="true"
         type="tns:GetAssetLifeCycleStatesResponse" />

         <xs:element name="getAssetVersionsRequest" nillable="true"
         type="tns:GetAssetVersionsRequest" />

         <xs:element name="getAssetVersionsResponse" nillable="true"
         type="tns:GetAssetVersionsResponse" />

         <xs:element name="rejectAssetRequest" nillable="true"
         type="tns:RejectAssetRequest" />

         <xs:element name="rejectAssetResponse" nillable="true"
         type="tns:RejectAssetResponse" />

         <xs:element name="approveAssetRequest" nillable="true"
         type="tns:ApproveAssetRequest" />

         <xs:element name="approveAssetResponse" nillable="true"
         type="tns:ApproveAssetResponse" />

         <xs:element name="removeAssetRequest" type="tns:RemoveAssetRequest" />

         <xs:element name="removeAssetResponse" type="tns:RemoveAssetResponse" />

         <xs:element name="validateAssetRequest" nillable="true"
         type="tns:ValidateAssetRequest" />

         <xs:element name="validateAssetResponse" nillable="true"
         type="tns:ValidateAssetResponse" />

         <xs:element name="getAssetSubmissionPropertiesRequest" nillable="true"
         type="tns:GetAssetSubmissionPropertiesRequest" />

         <xs:element name="getAssetSubmissionPropertiesResponse" nillable="true"
         type="tns:GetAssetSubmissionPropertiesResponse" />

         <xs:element name="getAssetTreeByAttributesRequest" nillable="true"
         type="tns:GetAssetTreeByAttributesRequest" />

         <xs:element name="getAssetTreeByAttributesResponse" nillable="true"
         type="tns:GetAssetTreeByAttributesResponse" />

         <xs:element name="submitForPublishingRequest" nillable="true"
         type="tns:SubmitForPublishingRequest" />

         <xs:element name="submitForPublishingResponse" nillable="true"
         type="tns:SubmitForPublishingResponse" />

         <xs:complexType name="CreateCompleteAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetInfo" type="tns:AssetInfo">
                        <xs:annotation>
                        	<xs:documentation>The assetinfo store all details needed for
                           creating the asset. The captureTemplateName store the name of
                           the capture template to be applied on the asset. the groupname
                           specified the group which will be the owner of the
                           asset. It also contains the artifacts info for the asset.</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element name="captureTemplateName" type="xs:string">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CreateCompleteAssetResponse">
            <xs:annotation>
               <xs:documentation />
            </xs:annotation>

            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey">
                        <xs:annotation>
                           <xs:documentation>The asset key of the service created by the
                           operation</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CreateAndSubmitAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetInfo" type="tns:AssetInfo">
                        <xs:annotation>
                           <xs:documentation>The assetinfo stores all details needed for
                           creating the asset. The captureTemplateName stores the name of
                           the capture template to be applied on the asset. The groupname
                           specifies the group which will be the owner of the
                           asset.</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element name="captureTemplateName" type="xs:string">
                     </xs:element>

                     <xs:element name="groupName" type="xs:string">
                     </xs:element>

                     <xs:element minOccurs="0" name="comment" type="xs:string">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CreateAndSubmitAssetResponse">
            <xs:annotation>
               <xs:documentation>The response would contain errorId - 109 if only the
               creation of the asset is successful, but the submission
               fails.</xs:documentation>
            </xs:annotation>

            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey">
                        <xs:annotation>
                           <xs:documentation>The asset key of the asset created by the
                           operation</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="requestProperties" type="tns:CustomProperty">
                        <xs:annotation>
                           <xs:documentation>The asset request properties required for
                           submission, if any.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateCompleteAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetInfoForUpdate" type="tns:AssetInfoForUpdate">
                        <xs:annotation>
                           <xs:documentation>The assetinfoForUpdate stores all details
                           needed for updating the asset. The groupname specifies the
                           group which will be the owner of the asset after the
                           update.</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element default="true" name="replaceCurrent" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we should replace the
                           existing attributes or artifacts or other fields. If it is set
                           the false and attribute/artifact/field is existed already, the
                           service should give warnings without doing the
                           update</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element default="true" name="partialUpdate" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we allow the partial
                           update. For example, one attribute/artifact/field update is
                           successful, but the other one is not, should we commit the
                           first one or not will depend on this flag Note: for now this
                           feature is not supported.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateCompleteAssetResponse">
            <xs:annotation>
               <xs:documentation />
            </xs:annotation>

            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey">
                        <xs:annotation>
                           <xs:documentation>The asset key of the service created by the
                           operation</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CreateAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="basicAssetInfo" type="tns:BasicAssetInfo" />

                     <xs:element name="captureTemplateName" type="xs:string">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CreateAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="basicAssetInfo" type="tns:BasicAssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetInfo" type="tns:AssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetArtifactsRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element maxOccurs="unbounded" minOccurs="0" name="artifactInfo"
                     type="tns:ArtifactInfo" />

                     <xs:element default="true" name="replaceCurrent" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we should replace the
                           existed artifact. If it is set the false and attribute is
                           existed already, the service should give warnings without
                           doing the update</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element default="true" name="partialUpdate" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we allow the partial
                           update. For example, one artifact update is successful, but
                           the other one is not, should we commit the first one or not
                           will depend on this flag</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetArtifactsResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="artifact"
                     type="tns:Artifact" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetAttributesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element name="extendedAssetInfo" type="tns:ExtendedAssetInfo" />

                     <xs:element default="true" name="replaceCurrent" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we should replace the
                           existed attributes. If it is set the false and attribute is
                           existed already, the service should give warnings without
                           doing the update</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element default="true" name="partialUpdate" type="xs:boolean">
                        <xs:annotation>
                           <xs:documentation>This indicates if we allow the partial
                           update. For example, one attribute update is successful, but
                           the other one is not, should we commit the first one or not
                           will depend on this flag</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetAttributesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="attributeName"
                     type="xs:string">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetDependenciesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element name="flattenedRelationshipForUpdate"
                     type="tns:FlattenedRelationshipForUpdate" />

                     <xs:element name="replaceCurrent" type="xs:boolean">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateAssetDependenciesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence />
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>


         <xs:complexType name="LockAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="LockAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetInfo" type="tns:AssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UnlockAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UnlockAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetInfo" type="tns:AssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SubscribeRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="subscription" type="tns:Subscription" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SubscribeResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="subscriptionId" type="xs:string" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UnsubscribeRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="subscriptionId" type="xs:string" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UnsubscribeResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="subscription" type="tns:Subscription" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateSubscriptionRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="subscription" type="tns:Subscription" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="UpdateSubscriptionResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="subscriptionId" type="xs:string" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetStatusRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetStatusResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetStatus"
                     type="tns:AssetStatus" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetInfoRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element minOccurs="0" name="version" type="tns:Version">
                        <xs:annotation>
                           <xs:documentation>This is optional</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element minOccurs="0" name="assetType" type="xs:token">
                        <xs:annotation>
                           <xs:documentation>This is optional</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element maxOccurs="1" minOccurs="0" name="published"
                     type="xs:boolean">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetInfoResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetInfo" type="tns:AssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetTreeByAttributesRequest">
            <xs:annotation>
               <xs:documentation>This the request for the operation
               getAssetTreeByAttributes. The attributeFilterList, mentions the parameters
               that would be used to filter assets before returning them back as a
               categorized count list. The attributeFilter list is a liost of
               AttributeFilter instances each containg a name value pair. The
               nextLevelAttribute defines the classifier based on which the filter
               attributes need to be grouped and counted.</xs:documentation>
            </xs:annotation>

            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="attributeFilterList" type="tns:AttributeFilter">
                        <xs:annotation>
                           <xs:documentation>This is required</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element name="nextLevelAttribute" type="xs:string">
                        <xs:annotation>
                           <xs:documentation>This is required as the client need pass the
                           exact asset type for this request</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetTreeByAttributesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="attributeValueCount" type="tns:AttributeValueCount" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SubmitForPublishingRequest">
            <xs:annotation>
               <xs:documentation>
               </xs:documentation>
            </xs:annotation>

            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="comment" type="xs:string"/>

                     <xs:element name="assetKey" type="tns:AssetKey"/>

                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="requestProperties" type="tns:Property"/>

                     <xs:element maxOccurs="1" minOccurs="0" name="publishTemplateName"
                     type="xs:string">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SubmitForPublishingResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="assetRequestId" type="xs:int">
                     </xs:element>

                     <xs:element name="errorMessages" type="xs:string">
                        <xs:annotation>
                           <xs:documentation>The error messages field indicates the short
                           coming on the asset for submission. i.e The mandatory
                           classifiers, artifacts and relationships which are not
                           entered.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetBasicAssetInfoRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element minOccurs="0" name="version" type="tns:Version">
                        <xs:annotation>
                           <xs:documentation>This is optional</xs:documentation>
                        </xs:annotation>
                     </xs:element>

                     <xs:element minOccurs="0" name="assetType" type="xs:token">
                        <xs:annotation>
                           <xs:documentation>This is optional</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetBasicAssetInfoResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="basicAssetInfo"
                     type="tns:BasicAssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAllAssetsGroupedByCategoryRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetQuery" type="tns:AssetQuery" />

                     <xs:element minOccurs="0" name="categorizingClassifer"
                     type="xs:string">
                        <xs:annotation>
                           <xs:documentation>The resultant list of assets will be
                           categorized based on the categorizing classifier; if no
                           categorizing classifier is present in the request,
                           "asset_type" is used as the default</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SearchAssetsDetailedRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetQuery" type="tns:AssetQuery" />
                     
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="searchLevel"
                     type="tns:SearchLevel">
                        <xs:annotation>
                           <xs:documentation>The searched assets would be populated only
                           with the requested levels of detail. If nothing is specified
                           for searchLevel, "basic" is taken as the
                           default.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:simpleType name="SearchLevel">
            <xs:annotation>
               <xs:documentation>Indicates the level of asset detail to be included in
               the search result. "basic" level -&gt; includes the basic AssetInfo,
               "extended" level -&gt; includes extended AssetInfo, "artifacts" level
               -&gt; includes artifact details, "lifecycle" level -&gt; includes
               lifecycle details, "relationships" level -&gt; includes relationship
               details, "all" level -&gt; includes all the above details i.e. basic +
               extended + artifacts + lifecycle + relationship details</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="basic">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="extended">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="artifacts">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="lifecycle">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="relationships">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="all">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:complexType name="SearchAssetsRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetQuery" type="tns:AssetQuery" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAllAssetsGroupedByCategoryResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="assetsGroupedByCategory" type="tns:AssetsGroupedByCategory">
                        <xs:annotation>
                           <xs:documentation>The CategorizedSearchResultAsset represents
                           an asset in the SearchAssetsCategorized operation's response.
                           It contains the basic asset info and a list of classifiers
                           that the asset has.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SearchAssetsDetailedResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="assetInfo"
                     type="tns:AssetInfo">
                        <xs:annotation>
                           <xs:documentation>The AssetInfo for an asset would be
                           populated with only the requested level of
                           detail.</xs:documentation>
                        </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SearchAssetsResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="assetBaseInfo"
                     type="tns:AssetBaseInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetSubscriptionRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="subscriptionId" type="xs:string" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetSubscriptionResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="subscription"
                     type="tns:Subscription" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetDependenciesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />

                     <xs:element minOccurs="0" name="depth" type="xs:int" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetDependenciesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="flattenedRelationship"
                     type="tns:FlattenedRelationship" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetDependenciesByGraphRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" >
                     	<xs:annotation>
                     		<xs:documentation>Needs documentation</xs:documentation>
                     	</xs:annotation></xs:element>

                     <xs:element minOccurs="0" name="depth" type="xs:int">
                                <xs:annotation>
                                	<xs:documentation>Needs documentation</xs:documentation>
                                </xs:annotation>
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetDependenciesByGraphResponse">
                <xs:annotation>
                	<xs:documentation>GraphRelationship indicating the dependencies</xs:documentation></xs:annotation>
                <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="graphRelationship"
                     type="tns:GraphRelationship" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetTypesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest"/>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetTypesResponse">
                <xs:annotation>
                	<xs:documentation>List of asset types (String names)</xs:documentation></xs:annotation>
                <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0" name="assetType"
                     type="xs:token" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetLifeCycleStatesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetType" type="xs:token" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetLifeCycleStatesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse"/>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetVersionsRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetVersionsResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="basicAssetInfo" type="tns:BasicAssetInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="RejectAssetRequest">
                <xs:annotation>
                	<xs:documentation>Contains the assetId of the asset to be rejected and the comments for the rejection.</xs:documentation></xs:annotation>
                <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="rejectionInfo" type="tns:RejectionInfo" >
                     	<xs:annotation>
                     		<xs:documentation></xs:documentation>
                     	</xs:annotation></xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="RejectAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="rejectionStatus" type="xs:boolean" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="ApproveAssetRequest">
                <xs:annotation>
                	<xs:documentation>Contains the assetId of the asset to be approved and the comments for the approval.</xs:documentation>
                </xs:annotation>
                <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="approvalInfo" type="tns:ApprovalInfo" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="ApproveAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="approvalStatus" type="xs:boolean" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>



         <xs:complexType name="AssetInfo">
            <xs:annotation>
               <xs:documentation>AssetInfo contains the basic required asset info,
               multiple name-value pair attributes, the list of artifact and
               assetLifeCycleInfo and dependent assets</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="basicAssetInfo" type="tns:BasicAssetInfo" />

               <xs:element minOccurs="0" name="extendedAssetInfo"
               type="tns:ExtendedAssetInfo" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="artifactInfo"
               type="tns:ArtifactInfo" />

               <xs:element minOccurs="0" name="assetLifeCycleInfo"
               type="tns:AssetLifeCycleInfo">
               </xs:element>

               <xs:element minOccurs="0" name="flattenedRelationship"
               type="tns:FlattenedRelationship">
                  <xs:annotation>
                     <xs:documentation>You can specify the dependent service or data
                     types in flattenedRelationship</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetInfoForUpdate">
            <xs:annotation>
               <xs:documentation>AssetInfoForUpdate is capable of holding all information
               necessary to update an asset. The information will include basic required
               asset info, multiple name-value pair attributes, the list of artifact,
               assetLifeCycleInfo and dependent assets for update</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="basicAssetInfo" type="tns:BasicAssetInfo" />

               <xs:element minOccurs="0" name="extendedAssetInfo"
               type="tns:ExtendedAssetInfo" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="artifactInfo"
               type="tns:ArtifactInfo" />

               <xs:element minOccurs="0" name="assetLifeCycleInfo"
               type="tns:AssetLifeCycleInfo">
               </xs:element>

               <xs:element minOccurs="0" name="flattenedRelationshipForUpdate"
               type="tns:FlattenedRelationshipForUpdate">
                  <xs:annotation>
                     <xs:documentation>You can specify the dependent service or data
                     types to be updated in
                     flattenedRelationshipForUpdate</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ExtendedAssetInfo">
            <xs:annotation>
               <xs:documentation>ExtendedAssetInfo contains additional classifier
               name-values</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="attribute"
               type="tns:AttributeNameValue" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ServiceDesignTimeInfo">
            <xs:sequence>
               <xs:element name="interfaceClass" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Interface name – this is same as porttype name and
                     java interface name</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="implementationClass" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Implementation class name (This should not be
                     visible or returned to the service consumer)</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="isSecured" type="xs:boolean">
                  <xs:annotation>
                     <xs:documentation>A Boolean value indicating whether this service
                     requires authentication</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="serviceType" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>It should be Production or
                     Experimental</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="serviceLayer" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>It should be Business, Intermediate, or
                     Common</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="publishingStatus" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>It should be Public or Prviate</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="serviceDomain" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>What domain does this service belong
                     to</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="pendingVersion" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Is there currently a newer version in progress ?
                     Is so, what is it.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ServiceRunTimeInfo">
            <xs:sequence>
               <xs:element minOccurs="0" name="deployedPool" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Pool in which the service is
                     deployed.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="productionURL" type="xs:anyURI">
                  <xs:annotation>
                     <xs:documentation>What is the service production endpoint
                     URL?</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="stagingURL" type="xs:anyURI">
                  <xs:annotation>
                     <xs:documentation>What is the service staging endpoint
                     URL?</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="serviceStatus" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>It should be Up, Down or
                     Maintenance</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="serviceState" type="xs:boolean">
                  <xs:annotation>
                     <xs:documentation>It should be Active or Passive. Only active
                     services will be available for routing. When pushing data from
                     staging instance to production, all the services will be in
                     "passive" state by default. An explicit action is then required to
                     change the state to "Active". This two step rollout of the data will
                     ensure, any accidental pushing of the data doesn’t cause production
                     issues.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetLifeCycleInfo">
            <xs:sequence>
               <xs:element name="lifeCycleState" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>What is the current life cycle state for the
                     asset? It should be one of the following states: Proposed,
                     Submitted, EntryReview, EntryApproval, EntryExit</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="domainOwner" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Domain owner (it should be a person or DL) for
                     this asset (these are preset based on domains). This is different
                     from Service owner, which is a pre-defined
                     classifier.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="domainType" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This indicates which business domain this asset
                     belongs to</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="architect" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This indicates the domain architect and it should
                     be always popolated</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="serviceArchitect" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is the service architect
                     assigned</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="opsArchitect" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is the ops architect assigned. It is optional
                     in some cases.</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="productManager" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is the product manager. It is optional in
                     some cases.</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="projectManager" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is the project manager. It is optional in
                     some cases.</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="approver" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Who is the approver at this stage? It can be
                     changed when the state changes.</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="trackerId" type="xs:string">
                  <xs:annotation>
                     <xs:documentation> What is the trace ticket for this
                     asset?</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="traceTicket" type="xs:string">
                  <xs:annotation>
                     <xs:documentation> This is the tracker project ID, if there is a
                     project.</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="nextAction" type="xs:string">
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="BasicServiceInfo">
            <xs:annotation>
               <xs:documentation>BasicServiceInfo structure contains some basic typed
               information about the service</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="serviceName" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>The name of the service(String)</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element name="serviceDescription" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>A brief description of the
                     service</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="serviceLongDescription" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>The Long description of the
                     service</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element name="serviceNamespace" type="xs:anyURI">
                  <xs:annotation>
                     <xs:documentation>Namespace of the service</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element name="serviceVersion" type="tns:Version">
                  <xs:annotation>
                     <xs:documentation>The version of the service in
                     Major.Minor.Maintenance format</xs:documentation>

                     <xs:appinfo />
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey">
                  <xs:annotation>
                     <xs:documentation>This is the optional as we do not have asset key
                     while creating the service or asset</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="groupName" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is an optional field, However it is mandated
                     during asset creation. When provided during asset creation, the
                     created asset will be assigned to this group. When provided during
                     asset updation, the group information of the asset will be updated
                     with the group name provided over here.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="BasicAssetInfo">
            <xs:annotation>
               <xs:documentation>BasicServiceInfo structure contains some basic typed
               information about the service</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="assetType" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>The type of the asset, it should Service or
                     DataType</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="assetName" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>The name of the asset</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="assetDescription" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>A brief description of the
                     service</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="assetLongDescription" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>A long description of the
                     service</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="version" type="tns:Version">
                  <xs:annotation>
                     <xs:documentation>The version of the asset in
                     Major.Minor.Maintenance format</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="assetKey" type="tns:AssetKey">
                  <xs:annotation>
                     <xs:documentation>This is the optional as we do not have asset key
                     while creating the service or asset</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="groupName" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is an optional field, However it is mandated
                     during asset creation. When provided during asset creation, the
                     created asset will be assigned to this group. When provided during
                     asset updation, the group information of the asset will be updated
                     with the group name provided over here.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="GraphRelationship">
            <xs:annotation>
               <xs:documentation>This is the graph representation of the
               relationship</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="sourceAsset" type="tns:AssetKey" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="targetAsset"
               type="tns:TypedRelationNode" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="FlattenedRelationship">
            <xs:annotation>
               <xs:documentation>This shows all the relationships shown in flattened
               mode.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element minOccurs="0" name="sourceAsset" type="tns:AssetKey" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAsset"
               type="tns:Relation" />

               <xs:element minOccurs="0" name="depth" type="xs:int">
                  <xs:annotation>
                     <xs:documentation>this indicates the depth of the relationship in
                     the data</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="partial" type="xs:boolean">
                  <xs:annotation>
                     <xs:documentation>this indicates if all relationships for the
                     particular asset is included in the data</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="FlattenedRelationshipForUpdate">
            <xs:annotation>
               <xs:documentation>This shows all the relationships shown in flattened
               mode.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element minOccurs="0" name="sourceAsset" type="tns:AssetKey" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="relatedAsset"
               type="tns:RelationForUpdate" />

               <xs:element minOccurs="0" name="depth" type="xs:int">
                  <xs:annotation>
                     <xs:documentation>this indicates the depth of the relationship in
                     the data</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="TypedRelationNode">
            <xs:sequence>
               <xs:element name="assetRelationship" type="xs:string" />

               <xs:element name="target" type="tns:GraphRelationship" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="Relation">
            <xs:sequence>
               <xs:element minOccurs="0" name="sourceAsset" type="tns:AssetKey" />

               <xs:element name="targetAsset" type="tns:AssetKey" />

               <xs:element name="assetRelationship" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>The possible values are: DependsOn, ProvidedBy,
                     NextVersion, PreviousVersion.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="RelationForUpdate">
            <xs:sequence>
               <xs:element minOccurs="0" name="currentSourceAsset" type="tns:AssetKey" />

               <xs:element minOccurs="0" name="currentTargetAsset" type="tns:AssetKey" />

               <xs:element maxOccurs="1" minOccurs="0" name="newRelation"
               type="tns:Relation">
               </xs:element>

               <xs:element maxOccurs="1" minOccurs="0" name="deleteRelation"
               type="xs:boolean" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetStatus">
            <xs:sequence>
               <xs:element name="state" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>The possible values are same as the asset life
                     cycle states</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="reviewer" type="tns:Reviewer" />

               <xs:element name="lastActivity" type="xs:dateTime" />

               <xs:element name="lastUpdateTime" type="xs:dateTime" />

               <xs:element name="assetSubmissionTime" type="xs:dateTime" />

               <xs:element minOccurs="0" name="nextState" type="xs:token" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="Reviewer">
            <xs:sequence>
               <xs:element name="role" type="xs:string">
                  <xs:annotation />
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="0" name="username"
               type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This should be the NT login of the
                     person</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="Subscription">
            <xs:sequence>
               <xs:element minOccurs="0" name="subscriptionId" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>This is the optional as we might not have the
                     subsriptionId while creating a subscription</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:choice>
                  <xs:element name="assetKey" type="tns:AssetKey">
                  </xs:element>

                  <xs:element name="assetQuery" type="tns:AssetQuery">
                  </xs:element>
               </xs:choice>

               <xs:element name="callbackEndpoint" type="xs:anyURI" />

               <xs:element name="subscriptionDuration" type="xs:date">
                  <xs:annotation>
                     <xs:documentation>What is the end time for this
                     subscription</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetChangeNotification">
            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="changedAsset"
               type="tns:AssetKey">
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="0" name="deletedAsset"
               type="tns:AssetKey">
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="0" name="addedAsset"
               type="tns:AssetKey">
               </xs:element>

               <xs:element name="notificationMsgId" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetQuery">
            <xs:annotation>
               <xs:documentation>attributeCriteria decides on the search criteria to be
               applied on classifiers and the artifactCriteria mentions the search
               criteria on the artifacts. the conjunction defines if both the artifact
               and the classifier criteria needs to be considered for including an asset
               in the search result or either one of then satisfying is
               sufficient.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="attributeCriteria" type="tns:AttributeCriteria" />

               <xs:element name="artifactCriteria" type="tns:ArtifactCriteria" />

               <xs:element name="conjunction" type="tns:Conjunction" />

               <xs:element minOccurs="0" name="relationshipCriteria"
               type="tns:RelationshipCriteria" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ArtifactCriteria">
            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="artifact"
               type="tns:Artifact" />

               <xs:element name="conjunction" type="tns:Conjunction" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AttributeCriteria">
            <xs:annotation>
               <xs:documentation>If two Attributes Exist with the same name a OR
               conjunction is introduced between them and the two values are together
               taken as an entity. For all other attribute the conjunction is defined by
               the conjunction value.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="attribute"
               type="tns:Attribute" />

               <xs:element name="conjunction" type="tns:Conjunction" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetBaseInfo">
            <xs:annotation>
               <xs:documentation>This returns the light weight asset info such as
               AssetKey including asset name, asset version and
               description.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="assetKey" type="tns:AssetKey">
                  <xs:annotation>
                     <xs:documentation>This should be asset key or id which can identify
                     the asset with it</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="assetVersion" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Version of the Asset.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="assetDescription" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Description of the Asset.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetKey">
            <xs:annotation>
               <xs:documentation>If only assetName is provided, the assetKey can not
               identify the asset. It will need more info such as assetType and version
               to identify the asset.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:choice>
                  <xs:element name="assetId" type="xs:string">
                     <xs:annotation>
                        <xs:documentation>This should be asset key or id which can
                        identify the asset with it</xs:documentation>
                     </xs:annotation>
                  </xs:element>

                  <xs:element name="assetName" type="xs:string">
                     <xs:annotation>
                        <xs:documentation>Name of the Asset.</xs:documentation>
                     </xs:annotation>
                  </xs:element>
               </xs:choice>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetDetail">
            <xs:annotation>
               <xs:documentation>If only assetName is provided, we need more info such as
               assetType and version to identify the asset. AssetDetail contains these
               info</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="assetName" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Name of the Asset.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="assetType" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Type of the Asset.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element name="version" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Version of the Asset.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ApprovalInfo">
            <xs:annotation>
               <xs:documentation>It consists of details of the asset,
               ApproverRole</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="approverRole" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Represents a required approver role required for
                     approving an asset request(for example, asset submission) some of
                     the roles include but not restricted to "Service PCR Review Board"
                     and "Architect"</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element maxOccurs="1" minOccurs="0" name="comments" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Represents the comments provided by the approver
                     at the time of approval. Right now it is not supported in client
                     APIs, have to log a ticket for this with SOA.</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:choice>
                  <xs:element name="assetId" type="xs:string" />

                  <xs:element name="assetDetail" type="tns:AssetDetail" />
               </xs:choice>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="RejectionInfo">
            <xs:annotation>
               <xs:documentation>It consists of details of the asset,
               RejectionRole</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="rejectionRole" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Represents a required rejection role required for
                     rejecting an asset request(for example, asset submission) some of
                     the roles include but not restricted to "Service PCR Review Board"
                     and "Architect"</xs:documentation>
                  </xs:annotation>
               </xs:element>

               <xs:element maxOccurs="1" minOccurs="0" name="comments" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Represents the comments provided by the approver
                     at the time of rejection. Basically it states the reason why the
                     asset was rejected. Right now it is not supported in client APIs,
                     have to log a ticket for this with SOA.</xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:choice>
                  <xs:element name="assetId" type="xs:string" />

                  <xs:element name="assetDetail" type="tns:AssetDetail" />
               </xs:choice>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ArtifactInfo">
            <xs:annotation>
               <xs:documentation>Artifact Info is something like WSDL, PRD, configuration
               files ...</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="artifact" type="tns:Artifact" />

               <xs:element name="artifactDetail" type="xs:base64Binary" />

               <xs:element minOccurs="0" name="contentType" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="Artifact">
            <xs:sequence>
               <xs:element name="artifactName" type="xs:string" />

               <xs:element name="artifactIdentifier" type="xs:token" />

               <xs:element name="artifactCategory" type="xs:string" />

               <xs:element name="artifactValueType" type="tns:ArtifactValueType" />

               <xs:element maxOccurs="1" minOccurs="0" name="artifactDisplayName"
               type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:simpleType name="ArtifactValueType">
            <xs:annotation>
               <xs:documentation>Indicates the type of value being uploaded for
               artifact</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="url">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="description">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="file">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:complexType name="AttributeFilter">
            <xs:annotation>
               <xs:documentation>The attributeFilterList is used to mention the various
               name value pairs based on which assets are to be
               filtered</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element maxOccurs="1" minOccurs="1" name="attributeName"
               type="xs:string" />

               <xs:element maxOccurs="1" minOccurs="1" name="attributeValue"
               type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AttributeValueCount">
            <xs:sequence>
               <xs:element name="attributeValue" type="xs:string" />

               <xs:element name="attributeValueCount" type="xs:long" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="Attribute">
            <xs:sequence>
               <xs:element name="attributeName" type="xs:string" />

               <xs:element name="attributeValue" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AttributeNameValue">
            <xs:annotation>
               <xs:documentation>The attributeValueLong and attributeValueBoolean
               functions are no longer used. All date values are stored in the format
               "yyyy-mm-dd"</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="attributeName" type="xs:string" />

               <xs:choice>
                  <xs:element name="attributeValueLong" type="xs:long" />

                  <xs:element name="attributeValueString" type="xs:string" />

                  <xs:element name="attributeValueBoolean" type="xs:boolean" />
               </xs:choice>
            </xs:sequence>
         </xs:complexType>

         <xs:simpleType name="Conjunction">
            <xs:annotation>
               <xs:documentation>Indicates the conjunction type</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="AND">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="OR">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:simpleType name="Version">
            <xs:annotation>
               <xs:documentation>The pattern should be MAJOR.MINOR.MAINTENANCE
               NNN.NN.N.</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:pattern value="[0-9][0-9][0-9].[0-9][0-9].[0-9]">
               </xs:pattern>
            </xs:restriction>
         </xs:simpleType>

         <xs:simpleType name="AckValue">
            <xs:annotation>
               <xs:documentation>Indicates whether the error is a severe error (causing
               the request to fail) or an informational error (a warning) that should be
               communicated to the user.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="Success">
                  <xs:annotation>
                     <xs:documentation>The request was processed successfully, but
                     something occurred that may affect your application or the
                     user.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="Failure">
                  <xs:annotation>
                     <xs:documentation>The request that triggered the error was not
                     processed successfully. When a serious application-level error
                     occurs, the error is returned instead of the business
                     data.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="Warning">
                  <xs:annotation>
                     <xs:documentation>The request that triggered the error was processed
                     successfully but with some warning.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="PartialFailure">
                  <xs:annotation>
                     <xs:documentation>The request that triggered the error was processed
                     successfully but with some warnings.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:complexType name="ErrorMessage">
            <xs:annotation>
               <xs:documentation>ErrorMessage to indicate any Error/Warning occurred as
               part of service call. Any run time error will not be reported here, but
               will be reported as part of soap fault.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="error"
               nillable="true" type="tns:ErrorData">
                  <xs:annotation>
                     <xs:documentation>Details about a single error.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ErrorData">
            <xs:annotation>
               <xs:documentation>This represents error details.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="errorId" type="xs:long">
                  <xs:annotation>
                     <xs:documentation>A unique code that identifies the particular error
                     condition that occurred. Your application can use error codes as
                     identifiers in your customized error-handling
                     algorithms.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element name="domain" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Name of the domain upon which the error occurred.
                     &lt;dl&gt; &lt;lh&gt;Domains include:&lt;/lh&gt; &lt;dt&gt;
                     Marketplace &lt;/dt&gt; &lt;dd&gt; A business or validation error
                     occurred for the Merchandising Service. &lt;/dd&gt; &lt;dt&gt; SOA
                     &lt;/dt&gt; &lt;dd&gt; An exception occurred in the Service Oriented
                     Architecture (SOA) framework. &lt;/dd&gt;
                     &lt;/dl&gt;</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element name="severity" type="tns:ErrorSeverity">
                  <xs:annotation>
                     <xs:documentation>Indicates whether the error caused the request to
                     fail (Error) or not (Warning). &lt;br&gt;&lt;br&gt; If the request
                     fails and the source of the problem is within the application (such
                     as a missing required element), please change the application before
                     you retry the request. If the problem is due to end-user input data,
                     please alert the end-user to the problem and provide the means for
                     them to correct the data. Once the problem in the application or
                     data is resolved, you can attempt to re- send the request to eBay.
                     &lt;br&gt;&lt;br&gt; If the source of the problem is on eBay's side,
                     you can retry the request as-is a reasonable number of times (eBay
                     recommends twice). If the error persists, contact Developer
                     Technical Support. Once the problem has been resolved, the request
                     may be resent in its original form. &lt;br&gt;&lt;br&gt; When a
                     Warning occurs, the error is returned in addition to the business
                     data. In this case, you do not need to retry the request (as the
                     original request was successful). However, depending on the cause or
                     nature of the warning, you might need to contact either the end user
                     or eBay to effect a long term solution to the problem to prevent it
                     from reoccurring in the future.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element name="category" type="tns:ErrorCategory">
                  <xs:annotation>
                     <xs:documentation>There are three categories of errors: request
                     errors, application errors, and system errors.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element name="message" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>A detailed description of the condition that
                     resulted in the error.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="subdomain" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>Name of the subdomain upon which the error
                     occurred. &lt;dl&gt; &lt;lh&gt;Subdomains include:&lt;/lh&gt;
                     &lt;dt&gt; Merchandising &lt;/dt&gt; &lt;dd&gt; The error is
                     specific to the Merchandising service. &lt;/dd&gt; &lt;dt&gt;
                     MarketplaceCommon &lt;/dt&gt; &lt;dd&gt; The error is common to all
                     Marketplace services. &lt;/dd&gt; &lt;/dl&gt;</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="exceptionId" type="xs:token">
                  <xs:annotation>
                     <xs:documentation>Unique identifier for an exception associated with
                     an error.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="0" name="parameter"
               nillable="true" type="tns:ErrorParameter">
                  <xs:annotation>
                     <xs:documentation>Some warning and error messages return one or more
                     variables that contain contextual information about the error. This
                     is often the field or value that triggered the
                     error.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ErrorParameter">
            <xs:annotation>
               <xs:documentation>Contextual information associated with an
               error.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:simpleContent>
               <xs:extension base="xs:string">
                  <xs:attribute name="name" type="xs:string">
                     <xs:annotation>
                        <xs:documentation>The name of the parameter in the list of
                        parameter types returned within the error
                        type.</xs:documentation>

                        <xs:appinfo>
                           <CallInfo>
                              <AllCalls />

                              <Returned>Conditionally</Returned>
                           </CallInfo>
                        </xs:appinfo>
                     </xs:annotation>
                  </xs:attribute>
               </xs:extension>
            </xs:simpleContent>
         </xs:complexType>

         <xs:simpleType name="ErrorSeverity">
            <xs:annotation>
               <xs:documentation>Indicates whether the error is a severe error (causing
               the request to fail) or an informational error (a warning) that should be
               communicated to the user.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="Error">
                  <xs:annotation>
                     <xs:documentation>The request that triggered the error was not
                     processed successfully. When a serious application-level error
                     occurs, the error is returned instead of the business
                     data.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="Warning">
                  <xs:annotation>
                     <xs:documentation>The request was processed successfully, but
                     something occurred that may affect your application or the user. For
                     example, eBay may have changed a value the user sent in. In this
                     case, eBay returns a normal, successful response and also returns
                     the warning.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:simpleType name="ErrorCategory">
            <xs:annotation>
               <xs:documentation>There are three categories of error: request errors,
               application errors, and system errors. Request and application errors are
               caused primarily by invalid data passed in the request. System errors are
               caused primarily by application failures and cannot be corrected by
               changing request values.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="System">
                  <xs:annotation>
                     <xs:documentation>Indicates that an error has occurred on the eBay
                     system side, such as a database or server down. An application can
                     retry the request as-is a reasonable number of times (eBay
                     recommends twice). If the error persists, contact Developer
                     Technical Support. Once the problem has been resolved, the request
                     may be resent in its original form.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="Application">
                  <xs:annotation>
                     <xs:documentation>An error occurred due to a problem with the
                     request, such as missing or invalid fields. The problem must be
                     corrected before the request can be made again. If the problem is
                     due to something in the application (such as a missing required
                     field), the application must be changed. Once the problem in the
                     application or data is resolved, resend the corrected request to
                     eBay.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="Request">
                  <xs:annotation>
                     <xs:documentation>An error occurred due to a problem with the
                     request, such as invalid or missing data. The problem must be
                     corrected before the request can be made again. If the problem is a
                     result of end-user data, the application must alert the end-user to
                     the problem and provide the means for the end-user to correct the
                     data. Once the problem in the data is resolved, resend the request
                     to eBay with the corrected data.</xs:documentation>
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:complexType name="RemoveAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey">
                     </xs:element>
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="RemoveAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse" />
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="ValidateAssetRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element minOccurs="0" name="assetInfo" type="tns:AssetInfo" />

                     <xs:element name="onlySyncValidation" type="xs:boolean" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="ValidateAssetResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element name="isValid" type="xs:boolean" />

                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="syncValidationErrors" type="tns:SyncValidationError" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="SyncValidationError">
            <xs:annotation>
               <xs:documentation>Represents the sync validation error for a particular
               asset element.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="element" type="xs:string" />

               <xs:element name="error" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="GetAssetSubmissionPropertiesRequest">
            <xs:complexContent>
               <xs:extension base="tns:BaseRequest">
                  <xs:sequence>
                     <xs:element name="assetKey" type="tns:AssetKey" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="GetAssetSubmissionPropertiesResponse">
            <xs:complexContent>
               <xs:extension base="tns:BaseResponse">
                  <xs:sequence>
                     <xs:element maxOccurs="unbounded" minOccurs="0"
                     name="customProperties" type="tns:CustomProperty" />
                  </xs:sequence>
               </xs:extension>
            </xs:complexContent>
         </xs:complexType>

         <xs:complexType name="CustomProperty">
            <xs:annotation>
               <xs:documentation>Represents the meta-data information of a custom
               property.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="name" type="xs:string" />

               <xs:element name="type" type="tns:CustomPropertyType" />

               <xs:element name="displayName" type="xs:string" />

               <xs:element name="defaultValue" type="xs:string" />

               <xs:element name="mandatory" type="xs:boolean" />

               <xs:element maxOccurs="unbounded" minOccurs="0" name="possibleValues"
               type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:simpleType name="CustomPropertyType">
            <xs:annotation>
               <xs:documentation>Holds the possible types for custom
               properties</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="STRING">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="BOOLEAN">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="DECIMAL">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="DATE">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:simpleType name="DataRetrievalMethodType">
            <xs:annotation>
               <xs:documentation>Indicates the way in which the response object will be
               returned: "CACHE" -&gt; returns the cache object if present, "NO_CAHCE"
               -&gt; executes the normal flow and creates the response
               object</xs:documentation>
            </xs:annotation>

            <xs:restriction base="xs:string">
               <xs:enumeration value="CACHE">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>

               <xs:enumeration value="NO_CACHE">
                  <xs:annotation>
                     <xs:documentation />
                  </xs:annotation>
               </xs:enumeration>
            </xs:restriction>
         </xs:simpleType>

         <xs:complexType name="Property">
            <xs:annotation>
               <xs:documentation>Representation of any custom
               property.</xs:documentation>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="propertyName" type="xs:string" />

               <xs:element name="propertyValue" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetsGroupedByCategory">
            <xs:sequence>
               <xs:element name="classifierValue" type="xs:string">
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="1" name="assetsOfACategory"
               type="tns:AssetsOfACategory" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="AssetsOfACategory">
            <xs:sequence>
               <xs:element name="basicAssetinfo" type="tns:BasicAssetInfo">
               </xs:element>

               <xs:element maxOccurs="1" minOccurs="0" name="extendedAssetInfo"
               type="tns:ExtendedAssetInfo" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="RelationshipCriterion">
            <xs:sequence>
               <xs:element name="relationShipType" type="xs:string">
               </xs:element>

               <xs:element name="relatedAssetName" type="xs:string" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="RelationshipCriteria">
            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0"
               name="relationshipCriterion" type="tns:RelationshipCriterion">
               </xs:element>

               <xs:element name="conjunction" type="tns:Conjunction" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType abstract="true" name="BaseRequest">
            <xs:annotation>
               <xs:documentation>This is the base class for request container for all
               service operations.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:sequence>
               <xs:element maxOccurs="unbounded" minOccurs="0" name="extension"
               type="tns:ExtensionType" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType name="ExtensionType">
            <xs:annotation>
               <xs:documentation>Documentation goes here</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="id" type="xs:positiveInteger" />

               <xs:element name="version" type="xs:string" />

               <xs:element name="contentType" type="xs:string" />

               <xs:element name="value" type="xs:string" />

               <xs:any maxOccurs="unbounded" minOccurs="0" processContents="lax" />
            </xs:sequence>
         </xs:complexType>

         <xs:complexType abstract="true" name="BaseResponse">
            <xs:annotation>
               <xs:documentation>Base response container for all service operations.
               Contains error information associated with the request.</xs:documentation>

               <xs:appinfo>
                  <typeLibrarySource library="common-type-library"
                  namespace="http://www.ebayopensource.org/turmeric/common/v1/types" />
               </xs:appinfo>
            </xs:annotation>

            <xs:sequence>
               <xs:element name="ack" type="tns:AckValue">
                  <xs:annotation>
                     <xs:documentation>
                     </xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Always</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="errorMessage" type="tns:ErrorMessage">
                  <xs:annotation>
                     <xs:documentation>Information for an error or warning that occurred
                     when eBay processed the request.</xs:documentation>

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Conditionally</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="version" type="xs:string">
                  <xs:annotation>
                     <xs:documentation />

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Always</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element minOccurs="0" name="timestamp" type="xs:dateTime">
                  <xs:annotation>
                     <xs:documentation />

                     <xs:appinfo>
                        <CallInfo>
                           <AllCalls />

                           <Returned>Always</Returned>
                        </CallInfo>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>

               <xs:element maxOccurs="unbounded" minOccurs="0" name="extension"
               type="tns:ExtensionType" />
            </xs:sequence>
         </xs:complexType>
      </xs:schema>
   </types>

   <message name="removeAssetRequest">
      <part name="parameters" element="tns:removeAssetRequest">
      </part>
   </message>

   <message name="getAssetStatusRequest">
      <part name="parameters" element="tns:getAssetStatusRequest">
      </part>
   </message>

   <message name="getAllAssetsGroupedByCategoryResponse">
      <part name="parameters" element="tns:getAllAssetsGroupedByCategoryResponse">
      </part>
   </message>

   <message name="subscribeResponse">
      <part name="parameters" element="tns:subscribeResponse">
      </part>
   </message>

   <message name="updateSubscriptionRequest">
      <part name="parameters" element="tns:updateSubscriptionRequest">
      </part>
   </message>

   <message name="removeAssetResponse">
      <part name="parameters" element="tns:removeAssetResponse">
      </part>
   </message>

   <message name="getAssetStatusResponse">
      <part name="parameters" element="tns:getAssetStatusResponse">
      </part>
   </message>

   <message name="searchAssetsResponse">
      <part name="parameters" element="tns:searchAssetsResponse">
      </part>
   </message>

   <message name="getAssetLifeCycleStatesResponse">
      <part name="parameters" element="tns:getAssetLifeCycleStatesResponse">
      </part>
   </message>

   <message name="unsubscribeResponse">
      <part name="parameters" element="tns:unsubscribeResponse">
      </part>
   </message>

   <message name="getAssetTypesRequest">
      <part name="parameters" element="tns:getAssetTypesRequest">
      </part>
   </message>

   <message name="validateAssetRequest">
      <part name="parameters" element="tns:validateAssetRequest">
      </part>
   </message>

   <message name="createAssetResponse">
      <part name="parameters" element="tns:createAssetResponse">
      </part>
   </message>

   <message name="updateAssetArtifactsRequest">
      <part name="parameters" element="tns:updateAssetArtifactsRequest">
      </part>
   </message>

   <message name="getAssetDependenciesByGraphRequest">
      <part name="parameters" element="tns:getAssetDependenciesByGraphRequest">
      </part>
   </message>

   <message name="updateAssetAttributesResponse">
      <part name="parameters" element="tns:updateAssetAttributesResponse">
      </part>
   </message>

   <message name="rejectAssetRequest">
      <part name="parameters" element="tns:rejectAssetRequest">
      </part>
   </message>

   <message name="getAssetTreeByAttributesResponse">
      <part name="parameters" element="tns:getAssetTreeByAttributesResponse">
      </part>
   </message>

   <message name="getBasicAssetInfoResponse">
      <part name="parameters" element="tns:getBasicAssetInfoResponse">
      </part>
   </message>

   <message name="approveAssetResponse">
      <part name="parameters" element="tns:approveAssetResponse">
      </part>
   </message>

   <message name="submitForPublishingRequest">
      <part name="parameters" element="tns:submitForPublishingRequest">
      </part>
   </message>

   <message name="getAllAssetsGroupedByCategoryRequest">
      <part name="parameters" element="tns:getAllAssetsGroupedByCategoryRequest">
      </part>
   </message>

   <message name="getAssetTreeByAttributesRequest">
      <part name="parameters" element="tns:getAssetTreeByAttributesRequest">
      </part>
   </message>

   <message name="getBasicAssetInfoRequest">
      <part name="parameters" element="tns:getBasicAssetInfoRequest">
      </part>
   </message>

   <message name="updateAssetResponse">
      <part name="parameters" element="tns:updateAssetResponse">
      </part>
   </message>

   <message name="getAssetDependenciesRequest">
      <part name="parameters" element="tns:getAssetDependenciesRequest">
      </part>
   </message>

   <message name="getAssetDependenciesByGraphResponse">
      <part name="parameters" element="tns:getAssetDependenciesByGraphResponse">
      </part>
   </message>

   <message name="createAssetRequest">
      <part name="parameters" element="tns:createAssetRequest">
      </part>
   </message>

   <message name="unlockAssetRequest">
      <part name="parameters" element="tns:unlockAssetRequest">
      </part>
   </message>

   <message name="updateSubscriptionResponse">
      <part name="parameters" element="tns:updateSubscriptionResponse">
      </part>
   </message>

   <message name="getAssetInfoRequest">
      <part name="parameters" element="tns:getAssetInfoRequest">
      </part>
   </message>

   <message name="lockAssetResponse">
      <part name="parameters" element="tns:lockAssetResponse">
      </part>
   </message>

   <message name="subscribeRequest">
      <part name="parameters" element="tns:subscribeRequest">
      </part>
   </message>

   <message name="getAssetDependenciesResponse">
      <part name="parameters" element="tns:getAssetDependenciesResponse">
      </part>
   </message>

   <message name="getAssetInfoResponse">
      <part name="parameters" element="tns:getAssetInfoResponse">
      </part>
   </message>

   <message name="updateAssetRequest">
      <part name="parameters" element="tns:updateAssetRequest">
      </part>
   </message>

   <message name="unlockAssetResponse">
      <part name="parameters" element="tns:unlockAssetResponse">
      </part>
   </message>

   <message name="approveAssetRequest">
      <part name="parameters" element="tns:approveAssetRequest">
      </part>
   </message>

   <message name="rejectAssetResponse">
      <part name="parameters" element="tns:rejectAssetResponse">
      </part>
   </message>

   <message name="createCompleteAssetRequest">
      <part name="parameters" element="tns:createCompleteAssetRequest">
      </part>
   </message>

   <message name="getSubscriptionResponse">
      <part name="parameters" element="tns:getSubscriptionResponse">
      </part>
   </message>

   <message name="searchAssetsDetailedRequest">
      <part name="parameters" element="tns:searchAssetsDetailedRequest">
      </part>
   </message>

   <message name="updateAssetDependenciesRequest">
      <part name="parameters" element="tns:updateAssetDependenciesRequest">
      </part>
   </message>

   <message name="unsubscribeRequest">
      <part name="parameters" element="tns:unsubscribeRequest">
      </part>
   </message>

   <message name="createCompleteAssetResponse">
      <part name="parameters" element="tns:createCompleteAssetResponse">
      </part>
   </message>

   <message name="getSubscriptionRequest">
      <part name="parameters" element="tns:getSubscriptionRequest">
      </part>
   </message>

   <message name="searchAssetsDetailedResponse">
      <part name="parameters" element="tns:searchAssetsDetailedResponse">
      </part>
   </message>

   <message name="updateCompleteAssetRequest">
      <part name="parameters" element="tns:updateCompleteAssetRequest">
      </part>
   </message>

   <message name="getAssetTypesResponse">
      <part name="parameters" element="tns:getAssetTypesResponse">
      </part>
   </message>

   <message name="submitForPublishingResponse">
      <part name="parameters" element="tns:submitForPublishingResponse">
      </part>
   </message>

   <message name="searchAssetsRequest">
      <part name="parameters" element="tns:searchAssetsRequest">
      </part>
   </message>

   <message name="lockAssetRequest">
      <part name="parameters" element="tns:lockAssetRequest">
      </part>
   </message>

   <message name="updateCompleteAssetResponse">
      <part name="parameters" element="tns:updateCompleteAssetResponse">
      </part>
   </message>

   <message name="createAndSubmitAssetRequest">
      <part name="parameters" element="tns:createAndSubmitAssetRequest">
      </part>
   </message>

   <message name="updateAssetDependenciesResponse">
      <part name="parameters" element="tns:updateAssetDependenciesResponse">
      </part>
   </message>

   <message name="updateAssetAttributesRequest">
      <part name="parameters" element="tns:updateAssetAttributesRequest">
      </part>
   </message>

   <message name="getAssetSubmissionPropertiesRequest">
      <part name="parameters" element="tns:getAssetSubmissionPropertiesRequest">
      </part>
   </message>

   <message name="getAssetVersionsResponse">
      <part name="parameters" element="tns:getAssetVersionsResponse">
      </part>
   </message>

   <message name="validateAssetResponse">
      <part name="parameters" element="tns:validateAssetResponse">
      </part>
   </message>

   <message name="updateAssetArtifactsResponse">
      <part name="parameters" element="tns:updateAssetArtifactsResponse">
      </part>
   </message>

   <message name="getAssetSubmissionPropertiesResponse">
      <part name="parameters" element="tns:getAssetSubmissionPropertiesResponse">
      </part>
   </message>

   <message name="getAssetVersionsRequest">
      <part name="parameters" element="tns:getAssetVersionsRequest">
      </part>
   </message>

   <message name="createAndSubmitAssetResponse">
      <part name="parameters" element="tns:createAndSubmitAssetResponse">
      </part>
   </message>

   <message name="getAssetLifeCycleStatesRequest">
      <part name="parameters" element="tns:getAssetLifeCycleStatesRequest">
      </part>
   </message>

   <portType name="RepositoryServicePort">
      <operation name="getAssetStatus">
         <wsdl:documentation>Get the status of an asset. Possible errors include InvalidAsset,
         InsufficientPrivileges.</wsdl:documentation>

         <input message="tns:getAssetStatusRequest" />

         <output message="tns:getAssetStatusResponse" />
      </operation>

      <operation name="getAssetInfo">
         <wsdl:documentation>If you specify AssetVersion, then information about the
         specific version of the asset, whose name is in the AssetKey, is returned. If
         the version is not supplied, then there are two possibilities. If the asset ID
         is specified in the asset key, then exactly the version that corresponds to the
         supplied asset ID is returned. On the other hand, if the asset ID is not
         supplied, then the latest version for that asset name is
         returned.</wsdl:documentation>

         <input message="tns:getAssetInfoRequest">
         </input>

         <output message="tns:getAssetInfoResponse">
         </output>
      </operation>

      <operation name="getBasicAssetInfo">
         <wsdl:documentation>
            The description is same as that of the operation getAssetInfo, except that the returned info is just the basic information.
            Possible errors include  InvalidAsset, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getBasicAssetInfoRequest">
         </input>

         <output message="tns:getBasicAssetInfoResponse">
         </output>
      </operation>

      <operation name="getAllAssetsGroupedByCategory">
         <wsdl:documentation>An additional search operation for returning grouped or
         categorized search results.</wsdl:documentation>

         <input message="tns:getAllAssetsGroupedByCategoryRequest">
            <wsdl:documentation>The Search asset request presently only support
            AttributeCriteria of the AssetQuery Object used. ArtifactCriteria and
            Conjunction are not supported due to limitations in the Logidex API. The
            default Conjunction is AND. The categorizing classifier defines the
            classifier on which grouping or categorization is to be
            done.</wsdl:documentation>
         </input>

         <output message="tns:getAllAssetsGroupedByCategoryResponse">
            <wsdl:documentation>The Response returns a List of CategorizedSearchResult.
            One entry for each varied value of the classifier. Each CategorizedSearch
            Result will have a a list of CategorizedSearchResultAsset, which will contain
            the basic asset info and a list of classifiers for the particular
            asset.</wsdl:documentation>
         </output>
      </operation>

      <operation name="searchAssetsDetailed">
         <wsdl:documentation>
            Search for an assets detailed information.
         </wsdl:documentation>
         <input message="tns:searchAssetsDetailedRequest">
            <wsdl:documentation>An additional search operation for returning assets with
            different levels of detail based on user's need. The Search asset request
            presently only support AttributeCriteria of the AssetQuery Object used.
            ArtifactCriteria and Conjunction are not supported due to limitations in the
            Logidex API. The default Conjunction is AND. The level of detail specifies
            the level of information to be returned.</wsdl:documentation>
         </input>

         <output message="tns:searchAssetsDetailedResponse">
            <wsdl:documentation>The Response returns a List of AssetInfo. The different
            parts of AssetInfo would be populated based on specified level of detail for
            the search.</wsdl:documentation>
         </output>
      </operation>

      <operation name="searchAssets">
         <wsdl:documentation>
            Search for an assset. Possible errors include InvalidQuery, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:searchAssetsRequest">
            <wsdl:documentation>The Search asset request presently only support
            AttributeCriteria of the AssetQuery Object used. ArtifactCriteria and
            Conjunction are not supported due to limitations in the Logidex API. The
            default Conjunction is AND</wsdl:documentation>
         </input>

         <output message="tns:searchAssetsResponse">
         </output>
      </operation>

      <operation name="getSubscription">
         <wsdl:documentation>
            Get a previously subscribed subscription definition.  Possible errors include InvalidSubscription, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getSubscriptionRequest">
         </input>

         <output message="tns:getSubscriptionResponse">
         </output>
      </operation>

      <operation name="getAssetDependencies">
         <wsdl:documentation>
            Based on specified criteria return the asset dependencies.  Possible errors include
            InvalidAsset, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getAssetDependenciesRequest">
         </input>

         <output message="tns:getAssetDependenciesResponse">
         </output>
      </operation>

      <operation name="getAssetDependenciesByGraph">
         <wsdl:documentation>
            Get the dependencies, given an asset, suitable for a graph (i.e, in a tree like format). Possible errors include InvalidAsset, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getAssetDependenciesByGraphRequest">
         </input>

         <output message="tns:getAssetDependenciesByGraphResponse">
         </output>
      </operation>

      <operation name="getAssetTypes">
         <wsdl:documentation>
           Get all defined asset types.   Possible errors include InvalidAsset, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getAssetTypesRequest">
         </input>

         <output message="tns:getAssetTypesResponse">
         </output>
      </operation>

      <operation name="getAssetLifeCycleStates">
         <wsdl:documentation>
            Retrieve the life cycle states for an asset.   Possible errors include InvalidAssetType, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getAssetLifeCycleStatesRequest">
         </input>

         <output message="tns:getAssetLifeCycleStatesResponse">
         </output>
      </operation>

      <operation name="getAssetVersions">
         <wsdl:documentation>
            Retrieve the versions of an assset.   Possible errors include InvalidAsset, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:getAssetVersionsRequest">
         </input>

         <output message="tns:getAssetVersionsResponse">
         </output>
      </operation>

      <operation name="rejectAsset">
         <wsdl:documentation>
            Flags the asset as &quot;rejected&quot; in the repository.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:rejectAssetRequest">
         </input>

         <output message="tns:rejectAssetResponse">
         </output>
      </operation>

      <operation name="approveAsset">
         <wsdl:documentation>
            Flags the asset as &quot;rejected&quot; in the repository.    Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:approveAssetRequest">
         </input>

         <output message="tns:approveAssetResponse">
         </output>
      </operation>

      <operation name="createAsset">
         <wsdl:documentation>After the asset is created, this operation locks the asset
         for use by the creator. Possible errors include InvalidData,
         InsufficientPrivileges, and DuplicateAsset.</wsdl:documentation>

         <input message="tns:createAssetRequest">
         </input>

         <output message="tns:createAssetResponse">
         </output>
      </operation>

      <operation name="updateAsset">
         <wsdl:documentation>This is the operation to be used for change management.
         Asset needs to be locked before calling this operation. Possible errors include
         InvalidData, InsufficientPrivileges, InvalidAssetState,
         AssetNotLocked.</wsdl:documentation>

         <input message="tns:updateAssetRequest">
         </input>

         <output message="tns:updateAssetResponse">
         </output>
      </operation>

      <operation name="updateAssetArtifacts">
         <wsdl:documentation>Allows for adding or updating the artifacts of an existing
         asset. This will add a new, or replaces an existing asset. The asset must be
         locked. Possible errors include InvalidData, InsufficientPrivileges,
         InvalidAssetState, AssetNotLocked.</wsdl:documentation>

         <input message="tns:updateAssetArtifactsRequest">
         </input>

         <output message="tns:updateAssetArtifactsResponse">
         </output>
      </operation>

      <operation name="updateAssetAttributes">
         <wsdl:documentation>Allows for adding or updating the attributes of an existing
         asset. This will add a new, or replaces existing attribtues. The asset must be
         locked. Possible errors include InvalidInput, InsufficientPrivileges,
         InvalidAssetState, AssetNotLocked.</wsdl:documentation>

         <input message="tns:updateAssetAttributesRequest">
         </input>

         <output message="tns:updateAssetAttributesResponse">
         </output>
      </operation>

      <operation name="lockAsset">
         <wsdl:documentation>This operation locks the asset. This is typically required
         before making changes (unless the asset has just been created, which
         automatically locks the asset).</wsdl:documentation>

         <input message="tns:lockAssetRequest">
         </input>

         <output message="tns:lockAssetResponse">
         </output>
      </operation>

      <operation name="unlockAsset">
         <wsdl:documentation>This is typically needed when you don't want to submit the
         asset for approval yet, but want others to be able to make changes before
         submitting for approval.</wsdl:documentation>

         <input message="tns:unlockAssetRequest">
         </input>

         <output message="tns:unlockAssetResponse">
         </output>
      </operation>

      <operation name="subscribe">
         <wsdl:documentation>
            Subscribe for notifications about changes or workflows regarding an asset based on a particular criteria.
            Possible errors include InvalidSubscriptionCriteria, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:subscribeRequest">
         </input>

         <output message="tns:subscribeResponse">
         </output>
      </operation>

      <operation name="unsubscribe">
         <wsdl:documentation>
            Unsubscribe from notification about changes or workflows regarding an asset.  Possible errors include
             InvalidSubscription, InsufficientPrivileges.
         </wsdl:documentation>
         <input message="tns:unsubscribeRequest">
         </input>

         <output message="tns:unsubscribeResponse">
         </output>
      </operation>

      <operation name="updateSubscription">
         <wsdl:documentation>
            This operation updates an existing subscription. The same original subscriptionID should be returned as output. 
            Possible errors include InvalidSubscription, InsufficientPrivileges, InvalidSubscriptionCriteria.
         </wsdl:documentation>
         <input message="tns:updateSubscriptionRequest">
         </input>

         <output message="tns:updateSubscriptionResponse">
         </output>
      </operation>

      <operation name="createCompleteAsset">
         <wsdl:documentation>Creates an asset along with its artifacts.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:createCompleteAssetRequest">
         </input>

         <output message="tns:createCompleteAssetResponse">
         </output>
      </operation>

      <operation name="createAndSubmitAsset">
         <wsdl:documentation>Same as createCompleteAsset and the asset gets flagged as &quot;submitted&quot;.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:createAndSubmitAssetRequest">
         </input>

         <output message="tns:createAndSubmitAssetResponse">
         </output>
      </operation>

      <operation name="updateCompleteAsset">
         <wsdl:documentation>Updates an asset along with its artifacts. If replaceCurrent is true, then the properties and artifacts related to the asset are overriden. Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:updateCompleteAssetRequest">
         </input>

         <output message="tns:updateCompleteAssetResponse">
         </output>
      </operation>

      <operation name="updateAssetDependencies">
         <wsdl:documentation>
            Needs Documentation.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:updateAssetDependenciesRequest">
         </input>

         <output message="tns:updateAssetDependenciesResponse">
         </output>
      </operation>

      <operation name="removeAsset">
         <wsdl:documentation>
            Needs Documentation.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:removeAssetRequest">
         </input>

         <output message="tns:removeAssetResponse">
         </output>
      </operation>

      <operation name="validateAsset">
         <wsdl:documentation>
            Needs Documentation.   Possible Errors, etc.
          </wsdl:documentation>
         <input message="tns:validateAssetRequest">
         </input>

         <output message="tns:validateAssetResponse">
         </output>
      </operation>

      <operation name="getAssetSubmissionProperties">
         <wsdl:documentation>
            Needs Documentation.   Possible Errors, etc.
         </wsdl:documentation>
         <input message="tns:getAssetSubmissionPropertiesRequest">
         </input>

         <output message="tns:getAssetSubmissionPropertiesResponse">
         </output>
      </operation>

      <operation name="getAssetTreeByAttributes">
         <wsdl:documentation>
            The getAssetTreeByAttributes will give the enough
            information so that the next level nodes can be rendered. It will return all
            possible values for a particular attribute among all assets that belong to an
            asset type in a specific library. It also returns the number of assets for
            each value.
         </wsdl:documentation>

         <input message="tns:getAssetTreeByAttributesRequest">
         </input>

         <output message="tns:getAssetTreeByAttributesResponse">
         </output>
      </operation>

      <operation name="submitForPublishing">
         <wsdl:documentation>
            Deprecated, use submit.
         </wsdl:documentation>

         <input message="tns:submitForPublishingRequest">
         </input>

         <output message="tns:submitForPublishingResponse">
         </output>
      </operation>

   </portType>

   <binding name="RepositoryServiceHttpBinding" type="tns:RepositoryServicePort">
      <http:binding verb="POST" />

      <operation name="getAssetStatus">
         <http:operation location="RepositoryService/getAssetStatus" />

         <input>
            <mime:content part="getAssetStatus" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetStatus" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetInfo">
         <http:operation location="RepositoryService/getAssetInfo" />

         <input>
            <mime:content part="getAssetInfo" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetInfo" type="text/xml" />
         </output>
      </operation>

      <operation name="getBasicAssetInfo">
         <http:operation location="RepositoryService/getBasicAssetInfo" />

         <input>
            <mime:content part="getBasicAssetInfo" type="text/xml" />
         </input>

         <output>
            <mime:content part="getBasicAssetInfo" type="text/xml" />
         </output>
      </operation>

      <operation name="getAllAssetsGroupedByCategory">
         <http:operation location="RepositoryService/searchAssetsCategorized" />

         <input>
            <mime:content part="searchAssetsCategorized" type="text/xml" />
         </input>

         <output>
            <mime:content part="searchAssetsCategorized" type="text/xml" />
         </output>
      </operation>

      <operation name="searchAssetsDetailed">
         <http:operation location="RepositoryService/searchAssetsDetailed" />

         <input>
            <mime:content part="searchAssetsDetailed" type="text/xml" />
         </input>

         <output>
            <mime:content part="searchAssetsDetailed" type="text/xml" />
         </output>
      </operation>

      <operation name="searchAssets">
         <http:operation location="RepositoryService/searchAssets" />

         <input>
            <mime:content part="searchAssets" type="text/xml" />
         </input>

         <output>
            <mime:content part="searchAssets" type="text/xml" />
         </output>
      </operation>

      <operation name="getSubscription">
         <http:operation location="RepositoryService/getSubscription" />

         <input>
            <mime:content part="getSubscription" type="text/xml" />
         </input>

         <output>
            <mime:content part="getSubscription" type="text/xml" />
         </output>
      </operation>

      <operation name="updateSubscription">
         <http:operation location="RepositoryService/updateSubscription" />

         <input>
            <mime:content part="updateSubscription" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateSubscription" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetDependencies">
         <http:operation location="RepositoryService/getAssetDependencies" />

         <input>
            <mime:content part="getAssetDependencies" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetDependencies" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetDependenciesByGraph">
         <http:operation location="RepositoryService/getAssetDependenciesByGraph" />

         <input>
            <mime:content part="getAssetDependenciesByGraph" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetDependenciesByGraph" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetTypes">
         <http:operation location="RepositoryService/getAssetTypes" />

         <input>
            <mime:content part="getAssetTypes" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetTypes" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetLifeCycleStates">
         <http:operation location="RepositoryService/getAssetLifeCycleStates" />

         <input>
            <mime:content part="getAssetLifeCycleStates" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetLifeCycleStates" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetVersions">
         <http:operation location="RepositoryService/getAssetVersions" />

         <input>
            <mime:content part="getAssetVersions" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetVersions" type="text/xml" />
         </output>
      </operation>

      <operation name="rejectAsset">
         <http:operation location="RepositoryService/rejectAsset" />

         <input>
            <mime:content part="rejectAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="rejectAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="approveAsset">
         <http:operation location="RepositoryService/approveAsset" />

         <input>
            <mime:content part="approveAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="approveAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="createAsset">
         <http:operation location="RepositoryService/createAsset" />

         <input>
            <mime:content part="createAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="createAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="updateAsset">
         <http:operation location="RepositoryService/updateAsset" />

         <input>
            <mime:content part="updateAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="updateAssetArtifacts">
         <http:operation location="RepositoryService/updateAssetArtifacts" />

         <input>
            <mime:content part="updateAssetArtifacts" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateAssetArtifacts" type="text/xml" />
         </output>
      </operation>

      <operation name="updateAssetAttributes">
         <http:operation location="RepositoryService/updateAssetAttributes" />

         <input>
            <mime:content part="updateAssetAttributes" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateAssetAttributes" type="text/xml" />
         </output>
      </operation>

      <operation name="lockAsset">
         <http:operation location="RepositoryService/lockAsset" />

         <input>
            <mime:content part="lockAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="lockAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="unlockAsset">
         <http:operation location="RepositoryService/unlockAsset" />

         <input>
            <mime:content part="unlockAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="unlockAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="subscribe">
         <http:operation location="RepositoryService/subscribe" />

         <input>
            <mime:content part="subscribe" type="text/xml" />
         </input>

         <output>
            <mime:content part="subscribe" type="text/xml" />
         </output>
      </operation>

      <operation name="unsubscribe">
         <http:operation location="RepositoryService/unsubscribe" />

         <input>
            <mime:content part="unsubscribe" type="text/xml" />
         </input>

         <output>
            <mime:content part="unsubscribe" type="text/xml" />
         </output>
      </operation>

      <operation name="createCompleteAsset">
         <http:operation location="RepositoryService/createCompleteAsset" />

         <input>
            <mime:content part="createCompleteAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="createCompleteAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="createAndSubmitAsset">
         <http:operation location="RepositoryService/createAndSubmitAsset" />

         <input>
            <mime:content part="createAndSubmitAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="createAndSubmitAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="updateCompleteAsset">
         <http:operation location="RepositoryService/updateCompleteAsset" />

         <input>
            <mime:content part="updateCompleteAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateCompleteAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="updateAssetDependencies">
         <http:operation location="RepositoryService/updateAssetDependencies" />

         <input>
            <mime:content part="updateAssetDependencies" type="text/xml" />
         </input>

         <output>
            <mime:content part="updateAssetDependencies" type="text/xml" />
         </output>
      </operation>

      <operation name="removeAsset">
         <http:operation location="RepositoryService/removeAsset" />

         <input>
            <mime:content part="removeAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="removeAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="validateAsset">
         <http:operation location="RepositoryService/validateAsset" />

         <input>
            <mime:content part="validateAsset" type="text/xml" />
         </input>

         <output>
            <mime:content part="validateAsset" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetTreeByAttributes">
         <http:operation location="RepositoryService/getAssetTreeByAttributes" />

         <input>
            <mime:content part="getAssetTreeByAttributes" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetTreeByAttributes" type="text/xml" />
         </output>
      </operation>

      <operation name="submitForPublishing">
         <http:operation location="RepositoryService/submitForPublishing" />

         <input>
            <mime:content part="submitForPublishing" type="text/xml" />
         </input>

         <output>
            <mime:content part="submitForPublishing" type="text/xml" />
         </output>
      </operation>

      <operation name="getAssetSubmissionProperties">
         <http:operation location="RepositoryService/getAssetSubmissionProperties" />

         <input>
            <mime:content part="getAssetSubmissionProperties" type="text/xml" />
         </input>

         <output>
            <mime:content part="getAssetSubmissionProperties" type="text/xml" />
         </output>
      </operation>
   </binding>

   <binding name="RepositoryServiceSOAPBinding" type="tns:RepositoryServicePort">
      <soap12:binding style="document"
      transport="http://schemas.xmlsoap.org/soap/http" />

      <operation name="getAssetStatus">
         <soap12:operation soapAction="urn:getAssetStatus" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetInfo">
         <soap12:operation soapAction="urn:getAssetInfo" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getBasicAssetInfo">
         <soap12:operation soapAction="urn:getBasicAssetInfo" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAllAssetsGroupedByCategory">
         <soap12:operation soapAction="urn:searchAssetsCategorized" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="searchAssetsDetailed">
         <soap12:operation soapAction="urn:searchAssetsDetailed" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="searchAssets">
         <soap12:operation soapAction="urn:searchAssets" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getSubscription">
         <soap12:operation soapAction="urn:getSubscription" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="updateSubscription">
         <soap12:operation soapAction="urn:updateSubscription" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetDependencies">
         <soap12:operation soapAction="urn:getAssetDependencies" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetDependenciesByGraph">
         <soap12:operation soapAction="urn:getAssetDependenciesByGraph"
         style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetTypes">
         <soap12:operation soapAction="urn:getAssetTypes" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetLifeCycleStates">
         <soap12:operation soapAction="urn:getAssetLifeCycleStates" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetVersions">
         <soap12:operation soapAction="urn:getAssetVersions" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="rejectAsset">
         <soap12:operation soapAction="urn:rejectAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="approveAsset">
         <soap12:operation soapAction="urn:approveAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="createAsset">
         <soap12:operation soapAction="urn:createAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="updateAsset">
         <soap12:operation soapAction="urn:updateAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="updateAssetArtifacts">
         <soap12:operation soapAction="urn:updateAssetArtifacts" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="updateAssetAttributes">
         <soap12:operation soapAction="urn:updateAssetAttributes" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="lockAsset">
         <soap12:operation soapAction="urn:lockAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="unlockAsset">
         <soap12:operation soapAction="urn:unlockAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="subscribe">
         <soap12:operation soapAction="urn:subscribe" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="unsubscribe">
         <soap12:operation soapAction="urn:unsubscribe" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="createCompleteAsset">
         <soap12:operation soapAction="urn:createCompleteAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="createAndSubmitAsset">
         <soap12:operation soapAction="urn:createAndSubmitAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="updateCompleteAsset">
         <soap12:operation soapAction="urn:updateCompleteAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>
      
      <operation name="updateAssetDependencies">
         <soap12:operation soapAction="urn:updateAssetDependencies" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="removeAsset">
         <soap12:operation soapAction="urn:removeAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="validateAsset">
         <soap12:operation soapAction="urn:validateAsset" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetSubmissionProperties">
         <soap12:operation soapAction="urn:getAssetSubmissionProperties"
         style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="getAssetTreeByAttributes">
         <soap12:operation soapAction="urn:getAssetTreeByAttributes" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>

      <operation name="submitForPublishing">
         <soap12:operation soapAction="urn:submitForPublishing" style="document" />

         <input>
            <soap12:body use="literal" />
         </input>

         <output>
            <soap12:body use="literal" />
         </output>
      </operation>
   </binding>

   <service name="RepositoryService">
      <port name="RepositoryServiceHttp" binding="tns:RepositoryServiceHttpBinding">
         <http:address
         location="http://localhost:8080/RepositoryService/RepositoryService" />
      </port>

      <port name="RepositoryServiceSOAP" binding="tns:RepositoryServiceSOAPBinding">
         <soap12:address
         location="http://localhost:8080/RepositoryService/RepositoryService" />
      </port>
   </service>
</definitions>

